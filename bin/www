#!/usr/bin/env node
/* eslint-disable no-console */

/**
 * Module dependencies.
 */

const http = require('http')
const chalk = require('chalk')

process.env.NODE_ENV = process.env.NODE_ENV || 'production'

/*
 * Spawn applicable servers
 */

const centralPort = process.env.PORT || '3001'

createServer(require('../server'), centralPort)
.then(server => {
  console.log(chalk.green.bold(`Server running on port ${centralPort}`))
})
.catch(onError.bind(null, centralPort))




/**
 * Create HTTP server
 */
function createServer(handler, port) {
  return new Promise((resolve, reject) => {
    // set port for Express
    handler.set('port', normalizePort(port))

    const server = http.createServer(handler)

    // Listen on provided port, on all network interfaces.
    server.listen(port)
    server.on('error', reject)
    server.on('listening', () => resolve(server))
  })
}


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(port, error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}
